package com.tu.bzahov.PrimeNumbersTask_B1;public class PrimeNumbers {	public static boolean isPrimeOrDeviders(int startNumber, int limit) {		for (int i = startNumber; i <= limit; i++) {			if (!isPrime(i)) {				int[] a = findDevidersOfNumber(i);			} else {				System.out.println("Number: " + i + " is prime");			}		}		return true;	}	/*public static boolean isPrimeOrDeviders2(int startNumber, int limit) {		for (int i = startNumber; i <= limit; i++) {			int[] a = findDevidersOfNumber(i);			if (a.length > 2)				//int[] a = findDevidersOfNumber(i);			} else {				System.out.println("Number: " + i + " is prime");			}		}		return true;	}*/	private static int[] findDevidersOfNumber(int n) {		int[] result = new int[1000];		int resultLenght = 0;		System.out.printf("\nDeviders of number: %d are:\n", n);		for (int i = 1; i <= Math.sqrt(n); i++) {			if (n % i == 0) {				int a = n / i;				if (a == i) {					if (isPrime(a)) {						result[++resultLenght] = i;						System.out.print(i + " ");					}				} else {					if (isPrime(a)) {						result[++resultLenght] = a;						System.out.print(a + " ");						//System.out.print(i + " " + n / i + " ");					}					if (isPrime(i)){						result[++resultLenght] = i;						System.out.print(i + " ");					}				}			}		}		System.out.println();		return result;	}	private static boolean isPrime(int n) {		if (n <= 1) return false;		if (n <= 3) return true;		if (n % 2 == 0 || n % 3 == 0) return false;		for (int i = 5; i * i <= n; i += 6)			if (n % i == 0 || n % (i + 2) == 0) {				return false;			}		return true;	}	private static boolean isPrimeOld(int p) {		if (p <= 1) return false;		for (int i = 2; i < p; i++)			if (p % i == 0)				return false;		return true;	}}